"""Service entry-point."""
import json
import logging

from service.dal import Project
from service.models import JSONManifest, JSONFactory


# Logging setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


# Lambda entry
def main(event, context=None):  # pylint: disable=unused-argument
    """Handle loandata as Eventbridge event and return report.

    The reports generated by the service have the following envelope:

    ```json
    {
        "reports": [
            {
                "title": "<the report title>",
                ...
            },
            ...
        ]
    }
    ```

    Parameters
    ----------
    event : dict
        The Eventbridge event payload with loandata for reporting as its detail.
    context : LambdaContext
        The lambda context object (for Lambda use only).

    Returns
    -------
    dict{str:any}
        Returns a dict which contains the reports generated by the service.

    """
    event = {} if event is None else event
    logger.info('Service invoked by event: %s', json.dumps(event, indent=2))

    # Load all rules
    project = Project()
    rules = [rule for _ in project.resources.values() for rule in _]
    logger.info('Service loaded rules: %s', json.dumps(rules, indent=2))

    # Confirm event is valid EventBridge -> SQS payload
    loans = []
    for record in event.get('Records', [{}]):
        if not all(
            key in record for key in ['source', 'detail-type', 'detail']
        ):
            logger.error(
                'Service received invalid EventBridge event- Skipping event'
            )
            continue

        # Attempt to load loandata
        try:
            loans.append(json.loads(record['detail']))
        except json.JSONDecodeError:
            logger.error(
                'Service received invalid event detail- Skipping event'
            )
            continue

    logger.info('Service received loans: %s', json.dumps(loans, indent=2))

    # Generate Manifests
    reports = []
    for loan in loans:
        applications = loan['applications']
        for application in applications:
            individual_loan = {'property': loan['property'], 'applications': [application]}
            manifest = JSONManifest(individual_loan, rules)
            logger.info(
                'Generated manifest: %s', json.dumps(manifest.items, indent=2)
            )

            projection = JSONFactory(manifest).get_projection()
            logger.info(
                'Generated projection: %s', json.dumps(projection, indent=2)
            )
            preliminary_report = projection.get('reports', [])
            if len(preliminary_report) > 0:
                for idx in range(len(preliminary_report)):
                    entry = preliminary_report[idx]
                    if entry['title'] == 'Residences Report':
                        if len(entry['residences']) > 1:
                            borrowers_idx = 1 if idx == 0 else 0
                            addr1 = set(entry['residences'][0].items())
                            addr2 = set(entry['residences'][1].items())
                            if len(addr1 ^ addr2) == 0:
                                entry['residences'].pop()
                                preliminary_report[borrowers_idx]['shared_address'] = True
                                break
                            else:
                                preliminary_report[borrowers_idx]['shared_address'] = False

            reports.append([preliminary_report])

    # Reformat report output and return
    return {'reports': reports}
